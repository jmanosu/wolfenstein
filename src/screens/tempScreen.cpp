#include "tempScreen.hpp"
#include "game/objects/hexs/oceanHex.hpp"
#include "game/objects/hexs/grassHex.hpp"


TempScreen::TempScreen()
{
  mMap = new Map();

  std::vector<Hex> bind;

  OceanHex temp;
  GrassHex temp2;
  bind.push_back(temp2);
  bind.push_back(temp2);
  bind.push_back(temp2);
  bind.push_back(temp2);
  bind.push_back(temp);

  std::vector<std::vector<int>> map {
              {  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3}, 
                {  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  3,  3,  3,  3,  3,  3,  3,  4,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3},
              {  4,  4,  4,  4,  4,  4,  4,  3,  4,  4,  4,  3,  3,  3,  3,  3,  3,  3,  4,  4,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3},
                {  4,  4,  4,  4,  4,  3,  3,  4,  4,  4,  4,  3,  3,  3,  3,  3,  3,  3,  4,  3,  4,  4,  3,  3,  3,  3,  3,  3,  3,  3},
              {  4,  4,  4,  4,  4,  3,  3,  3,  4,  4,  4,  4,  3,  4,  4,  3,  3,  4,  4,  4,  4,  3,  3,  3,  3,  3,  3,  3,  3,  3},
                {  4,  4,  4,  0,  4,  0,  0,  4,  4,  4,  4,  4,  4,  0,  4,  0,  4,  4,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
              {  4,  4,  4,  0,  4,  0,  0,  0,  0,  4,  4,  4,  4,  0,  0,  4,  4,  4,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                {  4,  4,  0,  0,  4,  0,  0,  0,  4,  4,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
              {  4,  4,  4,  4,  4,  0,  4,  4,  4,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
                {  4,  4,  4,  4,  4,  4,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
              {  4,  4,  4,  4,  4,  4,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  4,  0,  4,  0,  0,  0},
                {  4,  4,  4,  4,  4,  4,  4,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  4,  4,  4,  4,  4,  0,  0,  0},
              {  4,  4,  4,  4,  4,  4,  4,  4,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  4,  4,  4,  4,  4,  4,  0,  0},
                {  4,  4,  4,  4,  0,  0,  0,  0,  0,  0,  4,  4,  4,  4,  0,  0,  4,  4,  0,  0,  0,  4,  4,  4,  4,  4,  0,  0,  0,  0},
              {  4,  4,  4,  4,  0,  0,  0,  0,  0,  0,  4,  4,  4,  4,  0,  0,  4,  4,  0,  0,  0,  4,  4,  4,  4,  4,  0,  0,  0,  0},
                {  4,  4,  4,  4,  0,  0,  0,  0,  0,  0,  4,  4,  4,  4,  0,  0,  4,  4,  0,  0,  0,  4,  4,  4,  4,  4,  0,  0,  0,  0},
              {  4,  4,  4,  4,  4,  0,  0,  0,  0,  0,  4,  4,  4,  0,  4,  0,  0,  0,  4,  0,  0,  0,  4,  0,  4,  4,  0,  0,  0,  0},
                {  4,  4,  4,  4,  0,  0,  0,  0,  0,  4,  0,  4,  4,  4,  4,  4,  0,  4,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0},
              {  4,  4,  4,  4,  4,  0,  0,  0,  0,  4,  4,  4,  4,  4,  0,  4,  0,  4,  0,  4,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0},
                {  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  0,  4,  4,  4,  0,  4,  4,  4,  0,  0,  0,  0,  0,  0,  0,  0},
              {  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  0,  0,  0,  0,  0},
                {  4,  4,  4,  4,  4,  2,  4,  4,  2,  2,  2,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2},
              {  4,  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  4,  4,  4,  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2},
                {  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  4,  2,  2,  2,  2,  2,  2,  4,  2},
              {  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  4,  2,  2,  2,  2,  2,  4,  4},
                {  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  4,  2,  2,  2,  2,  2,  4,  4},
              {  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  4,  2,  2,  2,  2,  2,  4},
                {  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  4,  2,  2,  2,  2,  2,  4}
              };

  mMap->loadMap(map, bind);
}

TempScreen::~TempScreen()
{
  delete mMap;
}

void TempScreen::render()
{
  mMap->render();
  SDL_SetRenderDrawColor(Graphics::instance()->getRenderer(), 5, 42, 74, 255);
}

void TempScreen::update()
{
  mMap->update();
}